Package sc;

Helpers
 lettre = [['a' .. 'z'] + ['A' .. 'Z']];
 chiffre = ['0' .. '9'];
 char = lettre + '$' + '_';
 alpha = [lettre + ['_' + '$']];
 alphanum = [alpha + chiffre];

Tokens
 espaces = (' ' | 13 | 10)+;
 commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
 pv = ';';
 p_gauche = '(';
 p_droite = ')';
 virg = ',';
 ac_gauche = '{';
 ac_droite = '}';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 egal = '=';
 si = 'si';
 alors = 'alors';
 sinon = 'sinon';
 tantque = 'tantque';
 faire = 'faire';
 retour = 'retour';
 entier = 'entier';
 lire = 'lire';
 ecrire = 'ecrire';
 p_ecl = '!';
 inf = '<';
 esp = '&';
 pipe = '|';
 c_gauche = '[';
 c_droite = ']';
 nombre = chiffre+;
 nom = alpha alphanum*;

Ignored Tokens
 espaces, commentaire;

Productions
 programme =
  {declistvardeclistfonc} optdecvar declistfunc |
  {declistfonc} declistfunc;

 /* Déclaration variables */
 optdecvar = declistvar pv;

 declistvar =
  {declistvar} decvar declistvarvir |
  {decvar} decvar;

 declistvarvir =
  {declistvarvir} virg decvar declistvarvir |
  {decvar} virg decvar;

 decvar =
  {decvarint} entier nom |
  {decvartab} entier nom c_gauche nombre c_droite;


 /* Déclaration fonctions */
 declistfunc = {declistfunc} decfunc declistfunc | {empty};

 decfunc =
  {decvarinst} nom arglist optdecvar instbloc |
  {inst} nom arglist instbloc;

 arglist =
  {emptyarg} p_gauche p_droite |
  {args} p_gauche declistvar p_droite;


 /* Instructions */
 inst =
  {instaffect} instaffect |
  {instbloc} instbloc |
  {instif} instif |
  {insttq} insttq |
  {instappel} instappel |
  {instreturn} instreturn |
  {instecrire} instecrire |
  {instempty} instempty;

 instaffect = var egal expression pv;

 instbloc = ac_gauche instlist ac_droite;

 instlist =
  {instlist} inst instlist |
  {empty};

 instif =
  {ifelse} si expression alors instbloc instelse |
  {if} si expression alors instbloc;

 instelse = sinon instbloc;

 insttq = tantque expression faire instbloc;

 instappel = appelfunc pv;

 instreturn = retour expression pv;

 instecrire = ecrire p_gauche expression p_droite pv;

 instempty = pv;


 /* Expressions */
 expression =
  {or} expression pipe et |
  {et} et;

 et =
  {and} et esp eg_inf |
  {eg_inf} eg_inf;

 eg_inf =
  {inf} eg_inf inf plus_minus |
  {eg} eg_inf egal plus_minus |
  {plus_minus} plus_minus;

 plus_minus =
  {plus} plus_minus plus mult_div |
  {minus} plus_minus minus mult_div |
  {mult_div} mult_div;

 mult_div =
  {mult} mult_div mult non |
  {div} mult_div div non |
  {non} non;

 non =
  {not} pipe non |
  {facteur} facteur;

 facteur =
  {nombre} nombre |
  {appelfunc} appelfunc |
  {var} var |
  {parentheses} p_gauche expression p_droite |
  {read} lire p_gauche p_droite;

 var =
  {vartab} nom c_gauche expression c_droite |
  {varname} nom;

 explist =
  {explist} expression explistvir |
  {lastexpression} expression;

 explistvir =
  {explistvir} virg expression explistvir |
  {lastexpvir} virg expression;

 appelfunc =
  {funcarg} nom p_gauche explist p_droite |
  {func} nom p_gauche p_droite;
